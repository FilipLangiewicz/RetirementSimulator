Liferay.Loader.define("remote-app-support-web@1.0.7/index",["module","exports","require","frontend-js-web"],function(module,exports,require){var define=undefined;var global=window;{Object.defineProperty(exports,"__esModule",{value:true});exports.default=init;exports.VERSION=exports.REMOTE_APP_PROTOCOL=void 0;var _frontendJsWeb=require("frontend-js-web");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);
if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2)ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key])});else if(Object.getOwnPropertyDescriptors)Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));else ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,
key,Object.getOwnPropertyDescriptor(source,key))})}return target}function _defineProperty(obj,key,value){if(key in obj)Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});else obj[key]=value;return obj}const APPS_TO_IDS=new Map;const APP_IDS=new Set;const ERROR_CODES={UNKNOWN:-100,ALREADY_REGISTERED:-101};const REMOTE_APP_PROTOCOL="com.liferay.remote.app.protocol";exports.REMOTE_APP_PROTOCOL=REMOTE_APP_PROTOCOL;const VERSION=0;exports.VERSION=VERSION;const RESPONSES=
{};function escape(untrusted){return untrusted.replace(/&/g,"\x26amp;").replace(/</g,"\x26lt;").replace(/>/g,"\x26gt;").replace(/"/g,"\x26quot;").replace(/'/g,"\x26#39;")}function getNumber(object,property){if(has(object,property)&&typeof object[property]==="number")return object[property]}function getString(object,property){if(has(object,property)&&typeof object[property]==="string")return object[property]}function has(object,property){return Object.prototype.hasOwnProperty.call(object,property)}
const LOG_PREFIX="[HOST: remote-app-support]";function warning(message,...rest){}function postMessage(target,data){target.postMessage(_objectSpread(_objectSpread({},data),{},{protocol:REMOTE_APP_PROTOCOL,role:"host",version:VERSION}),"*")}function receiveMessage(event){const {data,source}=event;if(data&&getString(data,"protocol")===REMOTE_APP_PROTOCOL&&getString(data,"role")==="client"&&getNumber(data,"version")===0){const appID=getString(data,"appID");if(APPS_TO_IDS.has(source)&&APPS_TO_IDS.get(source)!==
appID){const message="Attempted to use new UUID ".concat(appID," with application that is already registered");warning(message);postMessage(source,{appID,code:ERROR_CODES.ALREADY_REGISTERED,kind:"error",message});return}const command=getString(data,"command");switch(command){case "fetch":{const {requestID}=data;const resource=data.resource;const init=data.init;const {body}=init;if(body===null||body===void 0?void 0:body.__FORM_DATA__){const formData=new FormData;Object.entries(body.__FORM_DATA__).forEach(([key,
value])=>{formData.append(key,value)});init.body=formData}(0,_frontendJsWeb.fetch)(resource,init).then((response)=>{RESPONSES[requestID]=response;postMessage(source,{appID,headers:Array.from(response.headers.entries()),kind:"fetch:resolve",ok:response.ok,redirected:response.redirected,requestID,status:response.status,statusText:response.statusText,type:response.type,url:response.url})}).catch((error)=>{postMessage(source,{appID,error,kind:"fetch:reject",requestID})})}break;case "fetch:response:blob":{var _RESPONSES$requestID;
const {requestID}=data;(_RESPONSES$requestID=RESPONSES[requestID])===null||_RESPONSES$requestID===void 0?void 0:_RESPONSES$requestID.blob().then((blob)=>{postMessage(source,{appID,blob,kind:"fetch:response:blob:resolve",requestID})}).catch((error)=>{postMessage(source,{appID,error,kind:"fetch:response:blob:reject",requestID})})}break;case "fetch:response:json":{var _RESPONSES$requestID2;const {requestID}=data;(_RESPONSES$requestID2=RESPONSES[requestID])===null||_RESPONSES$requestID2===void 0?void 0:
_RESPONSES$requestID2.json().then((json)=>{postMessage(source,{appID,json,kind:"fetch:response:json:resolve",requestID})}).catch((error)=>{postMessage(source,{appID,error,kind:"fetch:response:json:reject",requestID})})}break;case "fetch:response:text":{var _RESPONSES$requestID3;const {requestID}=data;(_RESPONSES$requestID3=RESPONSES[requestID])===null||_RESPONSES$requestID3===void 0?void 0:_RESPONSES$requestID3.text().then((text)=>{postMessage(source,{appID,kind:"fetch:response:text:resolve",requestID,
text})}).catch((error)=>{postMessage(source,{appID,error,kind:"fetch:response:text:reject",requestID})})}break;case "get":{const property=getString(data,"property");const {requestID}=data;let value;if(property==="companyId")value=Liferay.ThemeDisplay.getCompanyId();else if(property==="css")value=Liferay.ThemeDisplay.getCDNBaseURL()+Liferay.ThemeDisplay.getPathThemeRoot()+"/css/clay.css";else if(property==="defaultLanguageId")value=Liferay.ThemeDisplay.getDefaultLanguageId();else if(property==="isControlPanel")value=
Liferay.ThemeDisplay.isControlPanel();else if(property==="isSignedIn")value=Liferay.ThemeDisplay.isSignedIn();else if(property==="languageId")value=Liferay.ThemeDisplay.getLanguageId();else if(property==="siteGroupId")value=Liferay.ThemeDisplay.getSiteGroupId();else if(property==="userId")value=Liferay.ThemeDisplay.getUserId();else if(property==="userName")value=Liferay.ThemeDisplay.getUserName();if(value!==undefined)postMessage(source,{appID,kind:"get:resolve",property,requestID,value});else postMessage(source,
{appID,error:"Unsupported property ".concat(property),kind:"get:reject",property,requestID})}break;case "navigate":{const url=getString(data,"url");if(url)(0,_frontendJsWeb.navigate)(url)}break;case "openToast":{const type=getString(data,"type")||"info";const message=getString(data,"message");if(message)(0,_frontendJsWeb.openToast)({message:escape(message),type:escape(type)})}break;case "register":{const uuid=getString(data,"appID");if(uuid)if(APP_IDS.has(uuid)){const message="Attempted to register already registered UUID ".concat(uuid);
warning(message)}else{APPS_TO_IDS.set(source,uuid);APP_IDS.add(uuid);postMessage(source,{appID:uuid,kind:"registered"})}}break;case "unregister":{if(APPS_TO_IDS.has(source)&&APP_IDS.has(appID)){APPS_TO_IDS.delete(source);APP_IDS.delete(appID)}else warning("Unable to unregister invalid source/ID combination")}break;default:warning("Unexpected command: ".concat(command));break}}}function init(){window.addEventListener("message",receiveMessage)}}});
